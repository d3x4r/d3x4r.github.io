{"version":3,"sources":["components/FilterButton.jsx","components/FiltersGroup.jsx","components/App.jsx","index.js"],"names":["FilterButton","props","onClickHandler","data","id","name","state","type","Button","onClick","variant","FiltersGroup","buttons","ButtonGroup","className","Array","map","button","key","App","getState","a","axios","get","response","setState","getFilteredIdList","idList","filters","firstFilter","otherFilters","byId","filteredIdList","filter","cardId","length","updateState","allIds","cardIds","cardsData","activeFilters","reduce","acc","filterType","uiState","includes","updatedState","onChangeFilter","selectedFilterId","selectedFilterType","resetButton","changedFilters","updatedFiltersState","resetButtonState","resetFilterState","cleanFiltersState","cleanFilters","resetUiState","cleanData","renderFilters","filterGroup","resetState","renderResetButton","getCard","card","title","preview","keyWords","kind","github","web","Col","xs","Card","Header","Img","src","alt","Body","Subtitle","Text","join","Footer","Link","target","href","renderCards","currentCardId","renderSpinner","style","position","top","left","transform","Spinner","animation","renderGitHubLink","Image","width","this","Fragment","Row","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iVAaeA,EAVM,SAACC,GAAW,IACvBC,EAAoDD,EAApDC,eADsB,EAC8BD,EAApCE,KAAQC,EADF,EACEA,GAAIC,EADN,EACMA,KAAMC,EADZ,EACYA,MAAOC,EADnB,EACmBA,KACjD,OAAO,kBAACC,EAAA,EAAD,CACCC,QAASP,EAAeE,EAAIG,GAC5BG,QAAmB,WAAVJ,EAAqB,UAAY,aAEzCD,I,QCcIM,EAjBM,SAACV,GAAW,IACvBW,EAA4BX,EAA5BW,QAASV,EAAmBD,EAAnBC,eASjB,OACE,kBAACW,EAAA,EAAD,CAAaC,UAAU,QAPnBF,aAAmBG,MACdH,EAAQI,IAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAcC,IAAKD,EAAOZ,KAAMF,KAAMc,EAAQf,eAAgBA,MAEtF,kBAAC,EAAD,CAAcgB,IAAKN,EAAQP,KAAMF,KAAMS,EAASV,eAAgBA,M,+lBCRtDiB,E,2MACnBb,MAAQ,G,EAERc,S,qBAAW,4BAAAC,EAAA,qEACcC,IAAMC,IAAI,oBADxB,OACHC,EADG,OAET,EAAKC,SAASD,EAASrB,MAFd,yC,EASXuB,kBAAoB,SAACC,EAAQC,GAAa,IAAD,cACEA,GAAjCC,EAD+B,KACfC,EADe,WAE/BvB,EAAasB,EAAbtB,KAAMH,EAAOyB,EAAPzB,GACE2B,EAAW,EAAKzB,MAAxBH,KAAQ4B,KAEVC,EAAiBL,EAAOM,OAAO,SAACC,GAEpC,OADiBH,EAAKG,GACN3B,KAAUH,IAG5B,OAAI0B,EAAaK,OAAS,EACjB,EAAKT,kBAAkBM,EAAgBF,GAEzCE,G,EAGTI,YAAc,WAAO,IAAD,EAC0B,EAAK9B,MAD/B,IACVsB,QAAWG,EADD,EACCA,KAAMM,EADP,EACOA,OAAUlC,EADjB,EACiBA,KAC7BmC,EAAUnC,EAAKkC,OACfE,EAAYpC,EAAK4B,KAEjBS,EAAgBH,EAAOI,OAAO,SAACC,EAAKC,GACxC,IACMH,EADUT,EAAKY,GACSV,OAAO,SAAAA,GAAM,MAAqB,WAAjBA,EAAO3B,QACtD,OAAOkC,EAAcL,OAAS,EAAvB,sBAAgCO,GAAhC,YAAyCF,IAAiBE,GAChE,IAEGV,EAAiB,EAAKN,kBAAkBvB,EAAKkC,OAAQG,GACrDI,EAAUN,EAAQG,OAAO,SAACC,EAAKR,GAAN,OAAiBF,EAAea,SAASX,GAAxB,KAAuCQ,EAAvC,eAA6CR,EAAS,CAAE5B,MAAO,aAA/D,KAAmFoC,EAAnF,eAAyFR,EAAS,CAAE5B,MAAO,aAAa,IAElKwC,EAAe,CACnB3C,KAAM,CACJ4B,KAAMQ,EACNF,OAAQC,EACRM,YAIJ,EAAKnB,SAASqB,I,EAGhBC,eAAiB,SAACC,EAAkBC,GAAnB,OAA0C,WAAO,IAAD,EACX,EAAK3C,MAAjDsB,QAAWG,EAD4C,EAC5CA,KAAMM,EADsC,EACtCA,OAASa,EAD6B,EAC7BA,YAE5BC,EADuBpB,EAAKkB,GACUjC,IAAI,SAACiB,GAAY,IACnD7B,EAAO6B,EAAP7B,GACR,OAAO,EAAP,GAAY6B,EAAZ,CAAoB3B,MAAO0C,IAAqB5C,EAAK,SAAW,eAE5DgD,EAAmB,eAAMH,EAAqBE,GAC9CE,EAAyC,WAAtBH,EAAY5C,MAAZ,KAAsC4C,EAAtC,CAAmD5C,MAAO,aAAe4C,EAE5FJ,EAAe,CACnBlB,QAAS,CACPG,KAAK,EAAD,GAAOA,EAAP,GAAgBqB,GACpBf,SACAa,YAAaG,IAGjB,EAAK5B,SAASqB,EAAc,EAAKV,e,EAGnCkB,iBAAmB,WAAO,IAAD,EAC4B,EAAKhD,MAAhDsB,QAAWG,EADI,EACJA,KAAMM,EADF,EACEA,OAAQa,EADV,EACUA,YAE3BK,EAAoBlB,EAAOI,OAAO,SAACC,EAAKtC,GAC5C,IACMoD,EADiBzB,EAAK3B,GACQY,IAAI,SAAAiB,GAAM,YAAUA,EAAV,CAAkB3B,MAAO,eACvE,OAAO,EAAP,GAAYoC,EAAZ,eAAkBtC,EAAKoD,KACtB,IAEGH,EAAyC,aAAtBH,EAAY5C,MAAZ,KAAwC4C,EAAxC,CAAqD5C,MAAO,WAAa4C,EAE5FJ,EAAe,CACnBlB,QAAS,CACPG,KAAK,EAAD,GAAOwB,GACXlB,SACAa,YAAaG,IAIjB,EAAK5B,SAASqB,I,EAGhBW,aAAe,WAAO,IAAD,EACgB,EAAKnD,MAAhCH,KAAQ4B,EADG,EACHA,KAAMM,EADH,EACGA,OAChBqB,EAAYrB,EAAOI,OAAO,SAACC,EAAKtC,GAAN,YAAmBsC,EAAnB,eAAyBtC,EAAK,CAAEE,MAAO,cAAgB,IAEjFwC,EAAe,CACnB3C,KAAM,CACJ4B,OACAM,SACAO,QAASc,IAIb,EAAKjC,SAASqB,I,EAGhBa,cAAgB,WAAO,IAAD,EACkB,EAAKrD,MAAnCsB,QAAWS,EADC,EACDA,OAAQN,EADP,EACOA,KAI3B,OAFsBM,EAAOrB,IAAI,SAAAZ,GAAE,MAAK,CAAEA,KAAIwB,QAASG,EAAK3B,MAEvCY,IAAI,SAAC4C,GAAiB,IACjCxD,EAAgBwD,EAAhBxD,GAAIwB,EAAYgC,EAAZhC,QACZ,OAAO,kBAAC,EAAD,CAAcV,IAAKd,EAAIF,eAAgB,EAAK6C,eAAgBnC,QAASgB,O,EAIhFiC,WAAa,kBAAM,WACjB,EAAKP,mBACL,EAAKG,iB,EAGPK,kBAAoB,WAAO,IACNZ,EAAkB,EAAK5C,MAAlCsB,QAAWsB,YACnB,OAAO,kBAAC,EAAD,CAAchD,eAAgB,EAAK2D,WAAYjD,QAASsC,K,EAGjEa,QAAU,SAAC7B,GAAY,IAGf8B,EAFqB,EAAK1D,MAAxBH,KAAQ4B,KAEEG,GAGhB+B,EAMED,EANFC,MACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,SACAC,EAGEJ,EAHFI,KACAC,EAEEL,EAFFK,OACAC,EACEN,EADFM,IAGF,OACE,kBAACC,EAAA,EAAD,CAAKzD,UAAU,cAAc0D,GAAI,EAAGtD,IAAK+C,GACrC,kBAACQ,EAAA,EAAD,CAAM3D,UAAU,eACd,kBAAC2D,EAAA,EAAKC,OAAN,CAAa5D,UAAU,eAAemD,GACtC,kBAACQ,EAAA,EAAKE,IAAN,CAAUjE,QAAQ,MAAMkE,IAAKV,EAASW,IAAI,UAC1C,kBAACJ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,SAAN,CAAejE,UAAU,8BAA8BsD,GACvD,kBAACK,EAAA,EAAKO,KAAN,iBACE,0BAAMlE,UAAU,WAAWqD,EAASc,KAAK,MAAzC,OAGJ,kBAACR,EAAA,EAAKS,OAAN,CAAapE,UAAU,kCACnBuD,EAAU,kBAACI,EAAA,EAAKU,KAAN,CAAWC,OAAO,SAASC,KAAMhB,GAAjC,aAAkE,kBAACI,EAAA,EAAKU,KAAN,KAAW,yCACvFb,EAAO,kBAACG,EAAA,EAAKU,KAAN,CAAWC,OAAO,SAASC,KAAMf,GAAjC,gBAAkE,kBAACG,EAAA,EAAKU,KAAN,KAAW,gD,EAOlGG,YAAc,WAAO,IAAD,EACoB,EAAKhF,MAAnCH,KAAQkC,EADE,EACFA,OAAQO,EADN,EACMA,QAGxB,OADqBP,EAAOJ,OAAO,SAAAsD,GAAa,MAAqC,YAAjC3C,EAAQ2C,GAAejF,OAAsBiF,IAC7EvE,IAAI,EAAK+C,U,EAG/ByB,cAAgB,WAQd,OACE,yBAAK1E,UAAU,iBAAiB2E,MARN,CAC1BC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,0BAKT,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASrF,QAAQ,c,EAK1CsF,iBAAmB,WACjB,OACE,uBAAGlF,UAAU,UAAUuE,KAAK,4BAC1B,kBAACY,EAAA,EAAD,CAAOC,MAAM,OAAOtB,IAAI,+B,mFArL5BuB,KAAK/E,a,+BA4LL,OADoB+E,KAAK7F,MAAjBsB,QAKN,kBAAC,IAAMwE,SAAP,KACE,kBAACC,EAAA,EAAD,CAAKvF,UAAU,oEACZqF,KAAKH,mBACLG,KAAKrC,oBACLqC,KAAKxC,iBAER,kBAAC0C,EAAA,EAAD,KACGF,KAAKb,cAAcnD,OAAS,EAAIgE,KAAKb,cAAgB,uBAAGxE,UAAU,eAAb,qBAVnDqF,KAAKX,oB,GAtMec,IAAMC,W,MCAvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.467af788.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button  } from 'react-bootstrap';\r\n\r\nconst FilterButton = (props) => {\r\n  const { onClickHandler, data: { id, name, state, type } } = props;\r\n  return <Button \r\n          onClick={onClickHandler(id, type)} \r\n          variant={state === 'active' ? 'primary' : 'secondary'}\r\n          >\r\n          {name}\r\n          </Button>\r\n};\r\n\r\nexport default FilterButton;","import React from 'react';\r\nimport FilterButton from './FilterButton';\r\nimport { ButtonGroup  } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst FiltersGroup = (props) => {\r\n  const { buttons, onClickHandler } = props;\r\n\r\n  const renderButtons = () => {\r\n    if (buttons instanceof Array) {\r\n      return buttons.map(button => <FilterButton key={button.name} data={button} onClickHandler={onClickHandler} />)\r\n    }\r\n    return <FilterButton key={buttons.name} data={buttons} onClickHandler={onClickHandler} />\r\n  };\r\n\r\n  return (\r\n    <ButtonGroup className=\"ml-2\">\r\n      {renderButtons()}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n\r\nexport default FiltersGroup;\r\n\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport FiltersGroup from './FiltersGroup';\r\nimport { Row, Col, Card, Spinner, Image } from 'react-bootstrap';\r\n\r\nexport default class App extends React.Component {\r\n  state = {};\r\n\r\n  getState = async () => {\r\n    const response = await axios.get('./data/data.json');\r\n    this.setState(response.data);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getState();\r\n  }\r\n\r\n  getFilteredIdList = (idList, filters) => {\r\n    const [ firstFilter, ...otherFilters ] = filters;\r\n    const { type, id } = firstFilter;\r\n    const { data: { byId } } = this.state;\r\n\r\n    const filteredIdList = idList.filter((cardId) => {\r\n      const cardData = byId[cardId];\r\n      return cardData[type] === id;\r\n    });\r\n\r\n    if (otherFilters.length > 0) {\r\n      return this.getFilteredIdList(filteredIdList, otherFilters);\r\n    }\r\n    return filteredIdList;\r\n  }\r\n\r\n  updateState = () => {\r\n    const { filters: { byId, allIds }, data } = this.state;\r\n    const cardIds = data.allIds;\r\n    const cardsData = data.byId;\r\n\r\n    const activeFilters = allIds.reduce((acc, filterType) => {\r\n      const filters = byId[filterType];\r\n      const activeFilters = filters.filter(filter => filter.state === 'active');\r\n      return activeFilters.length > 0 ? [ ...acc , ...activeFilters] : acc;\r\n    }, []);\r\n\r\n    const filteredIdList = this.getFilteredIdList(data.allIds, activeFilters);\r\n    const uiState = cardIds.reduce((acc, cardId) => filteredIdList.includes(cardId) ? { ...acc, [cardId]: { state: 'visible'} } : { ...acc, [cardId]: { state: 'hidden'} }, {});\r\n\r\n    const updatedState = {\r\n      data: {\r\n        byId: cardsData,\r\n        allIds: cardIds,\r\n        uiState,\r\n      }\r\n    };\r\n\r\n    this.setState(updatedState);\r\n  }\r\n\r\n  onChangeFilter = (selectedFilterId, selectedFilterType) => () => {\r\n    const { filters: { byId, allIds,  resetButton } } = this.state;\r\n    const selectedFiltersGroup = byId[selectedFilterType];\r\n    const changedFilters = selectedFiltersGroup.map((filter) => {\r\n      const { id } = filter;\r\n      return { ...filter, state: selectedFilterId === id ? 'active' : 'inactive' };\r\n    });\r\n    const updatedFiltersState = { [selectedFilterType]: changedFilters };\r\n    const resetButtonState = resetButton.state === 'active' ? { ...resetButton, state: 'inactive' } : resetButton;\r\n\r\n    const updatedState = {\r\n      filters: {\r\n        byId: { ...byId, ...updatedFiltersState },\r\n        allIds,\r\n        resetButton: resetButtonState,\r\n      },\r\n    };\r\n    this.setState(updatedState, this.updateState);\r\n  }\r\n\r\n  resetFilterState = () => {\r\n    const { filters: { byId, allIds, resetButton } } = this.state;\r\n\r\n    const cleanFiltersState = allIds.reduce((acc, id) => {\r\n      const currentFilters = byId[id];\r\n      const cleanFilters = currentFilters.map(filter => ({ ...filter, state: 'inactive' }));\r\n      return { ...acc, [id]: cleanFilters };\r\n    }, {});\r\n\r\n    const resetButtonState = resetButton.state === 'inactive' ? { ...resetButton, state: 'active' } : resetButton;\r\n\r\n    const updatedState = {\r\n      filters: {\r\n        byId: { ...cleanFiltersState },\r\n        allIds,\r\n        resetButton: resetButtonState,\r\n      },\r\n    };\r\n\r\n    this.setState(updatedState);\r\n  };\r\n\r\n  resetUiState = () => {\r\n    const { data: { byId, allIds } } = this.state;\r\n    const cleanData = allIds.reduce((acc, id) => ({ ...acc, [id]: { state: 'visible' } }), {});\r\n\r\n    const updatedState = {\r\n      data: {\r\n        byId,\r\n        allIds,\r\n        uiState: cleanData,\r\n      },\r\n    };\r\n\r\n    this.setState(updatedState);\r\n  }\r\n\r\n  renderFilters = () => {\r\n    const { filters: { allIds, byId } } = this.state;\r\n\r\n    const filtersGroups = allIds.map(id => ({ id, filters: byId[id] }));\r\n\r\n    return filtersGroups.map((filterGroup) => {\r\n      const { id, filters } = filterGroup;\r\n      return <FiltersGroup key={id} onClickHandler={this.onChangeFilter} buttons={filters} />;\r\n    });\r\n  }\r\n\r\n  resetState = () => () => {\r\n    this.resetFilterState();\r\n    this.resetUiState();\r\n  }\r\n\r\n  renderResetButton = () => {\r\n    const { filters: { resetButton } } = this.state;\r\n    return <FiltersGroup onClickHandler={this.resetState} buttons={resetButton} />;\r\n  }\r\n\r\n  getCard = (cardId) => {\r\n    const { data: { byId } } = this.state;\r\n    \r\n    const card = byId[cardId];\r\n\r\n    const { \r\n      title,\r\n      preview,\r\n      keyWords,\r\n      kind,\r\n      github,\r\n      web,\r\n    } = card;\r\n\r\n    return (\r\n      <Col className=\"d-flex mb-4\" xs={3} key={title}>\r\n          <Card className=\"flex-grow-1\">\r\n            <Card.Header className=\"text-center\">{title}</Card.Header>\r\n            <Card.Img variant=\"top\" src={preview} alt=\"title\" />\r\n            <Card.Body>\r\n              <Card.Subtitle className=\"mb-2 text-muted text-right\">{kind}</Card.Subtitle>\r\n              <Card.Text>Keywords:\r\n                <span className=\"d-block\">{keyWords.join(', ')}.</span>\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"d-flex justify-content-between\">\r\n              { github ?  <Card.Link target=\"_blank\" href={github}>on github</Card.Link> :  <Card.Link><s>on github</s></Card.Link> }\r\n              { web ?  <Card.Link target=\"_blank\" href={web}>watch online</Card.Link> :  <Card.Link><s>watch online</s></Card.Link> }\r\n            </Card.Footer>\r\n          </Card>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  renderCards = () => {\r\n    const { data: { allIds, uiState } } = this.state;\r\n\r\n    const currentCards = allIds.filter(currentCardId => uiState[currentCardId].state === 'visible' ? currentCardId : false);\r\n    return currentCards.map(this.getCard);\r\n  }\r\n\r\n  renderSpinner = () => {\r\n    const spinnerWrapperStyle = {\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, -50%)',\r\n    };\r\n\r\n    return (\r\n      <div className='spinnerWrapper' style={spinnerWrapperStyle}>\r\n        <Spinner animation=\"border\" variant=\"primary\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderGitHubLink = () => {\r\n    return (\r\n      <a className=\"mr-auto\" href=\"https://github.com/d3x4r\">\r\n        <Image width=\"35px\" src=\"data/img/github-logo.svg\" />\r\n      </a>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { filters } = this.state;\r\n    if (!filters) {\r\n      return this.renderSpinner();\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Row className=\"d-flex justify-content-end mt-4 mb-5 pr-3 pl-3 align-items-start\">\r\n          {this.renderGitHubLink()}\r\n          {this.renderResetButton()}\r\n          {this.renderFilters()}\r\n        </Row>\r\n        <Row>\r\n          {this.renderCards().length > 0 ? this.renderCards() : <p className=\"font-italic\">Match not found</p>}\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style/style.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}